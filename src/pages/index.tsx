import { type NextPage } from "next";
import Head from "next/head";
import Link from "next/link";
import { signIn, signOut, useSession } from "next-auth/react";

import { api } from "~/utils/api";
import Image from "next/image";
import { type FormEvent, useState, type MouseEvent } from "react";
import { useIsMutating } from "@tanstack/react-query";

const Home: NextPage = () => {
  const [title, setTitle] = useState<string>("");
  const mutationCount = useIsMutating();
  const hello = api.example.getAll.useQuery();
  const secretHello = api.example.getSecretAll.useQuery("secret");
  const allTodos = api.example.getAllTodos.useQuery();
  const utils = api.useContext();
  const toggleTodo = api.example.toggleTodo.useMutation({
    async onMutate({ id }) {
      await utils.example.getAllTodos.cancel();
      const previousTodos = utils.example.getAllTodos.getData();
      //optimistic update
      utils.example.getAllTodos.setData(undefined, (prev) => {
        return prev?.map((todo) => {
          if (todo.id === id) {
            return { ...todo, completed: !todo.completed };
          }
          return todo;
        });
      });
      return { previousTodos };
    },
    onError(error, variables, context) {
      utils.example.getAllTodos.setData(undefined, context?.previousTodos);
    },
    async onSettled() {
      //if no of mutations > 1, we need to use context to get the previousTodos
      await utils.example.getAllTodos.cancel();
      if (mutationCount === 1) {
        await utils.example.getAllTodos.invalidate();
      }
    },
  });
  const createTodo = api.example.createTodo.useMutation({
    async onMutate(title) {
      await utils.example.getAllTodos.cancel();
      const previousTodos = utils.example.getAllTodos.getData();
      //optimistic update
      utils.example.getAllTodos.setData(undefined, (prev) => {
        return prev?.concat({
          id: Math.random().toString(),
          title,
          userId: Math.random().toString(),
          completed: false,
        });
      });
      return { previousTodos };
    },
    onError(error, variables, context) {
      utils.example.getAllTodos.setData(undefined, context?.previousTodos);
    },
    async onSettled() {
      await utils.example.getAllTodos.cancel();
      if (mutationCount === 1) {
        await utils.example.getAllTodos.invalidate();
      }
    },
  });

  const todoDelete = api.example.deleteTodo.useMutation({
    async onMutate(id) {
      await utils.example.getAllTodos.cancel();
      const previousTodos = utils.example.getAllTodos.getData();
      //optimistic update
      utils.example.getAllTodos.setData(undefined, (prev) => {
        return prev?.filter((todo) => todo.id !== id);
      });
      return { previousTodos };
    },
    onError(error, variables, context) {
      utils.example.getAllTodos.setData(undefined, context?.previousTodos);
    },
    async onSettled() {
      await utils.example.getAllTodos.cancel();
      if (mutationCount === 1) {
        await utils.example.getAllTodos.invalidate();
      }
    },
  });

  const { data: session } = useSession();

  function submitHandler(event: FormEvent<HTMLFormElement>) {
    event.preventDefault();
    if (title === "") return;
    createTodo.mutate(title);
    setTitle("");
  }

  function deleteHandler(event: MouseEvent<HTMLDivElement>, id: string) {
    event.stopPropagation();
    todoDelete.mutate(id);
  }

  return (
    <>
      <Head>
        <title>Create T3 App</title>
        <meta name="description" content="Generated by create-t3-app" />
        <link rel="icon" href="/favicon.ico" />
      </Head>
      <main className="flex min-h-screen select-none flex-col items-center justify-center bg-black text-white">
        {hello.isLoading ? <p>Loading...</p> : <p>{hello.data}</p>}
        {session ? (
          <button onClick={() => void signOut()}>Sign out</button>
        ) : (
          <button onClick={() => void signIn()}>Sign in</button>
        )}
        {/* if session, display my name and picture */}
        {session && (
          <>
            <p>Signed in as {session.user?.email}</p>
            <div>
              <Image
                src={session.user?.image ?? ""}
                alt="user picture"
                width={128}
                height={128}
                className="rounded-full"
              />
            </div>
          </>
        )}
        {/* if session, display secret hello */}
        {session && (
          <>
            {secretHello.isLoading ? (
              <p>Loading...</p>
            ) : (
              <p>{secretHello.data}</p>
            )}
          </>
        )}
        {/* if session, display all todos */}
        {session && (
          <>
            {allTodos.isLoading ? (
              <p>Loading...</p>
            ) : (
              <ul className="my-4 flex w-fit min-w-[50%] grow flex-col justify-end">
                {allTodos.data?.map((todo) => (
                  <li
                    key={todo.id}
                    className={`mb-2 flex cursor-pointer items-center justify-between rounded-full bg-gray-700 p-2 last:mb-0 hover:scale-105 ${
                      todo.completed ? "line-through" : ""
                    }`}
                    onClick={() =>
                      toggleTodo.mutate({ id: todo.id, state: todo.completed })
                    }
                  >
                    {todo.title}
                    <div
                      className="h-5 w-5 rounded-full bg-white hover:scale-110"
                      onClick={(e) => deleteHandler(e, todo.id)}
                    />
                  </li>
                ))}
              </ul>
            )}
            <form onSubmit={submitHandler} className="pb-4">
              <input
                type="text"
                onChange={(e) => setTitle(e.target.value)}
                className="rounded-full px-2 text-black"
                value={title}
              />
              <button
                type="submit"
                className="mx-4 rounded-full bg-slate-600 px-4 py-2 text-white"
              >
                Add
              </button>
            </form>
          </>
        )}
      </main>
    </>
  );
};

export default Home;
